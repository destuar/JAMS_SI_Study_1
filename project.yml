title: "DEI Rollbacks, Brand Authenticity, and Consumer Reaction on Social Media"
description: "End-to-end pipeline for analyzing Facebook comments related to corporate DEI decisions."

# --- Variables ---
vars:
  # Data Paths
  raw_data_dir: "data/raw" # Assumes structure like data/raw/Company/Phase/*.json
  derived_data_dir: "data/derived"
  results_dir: "results"
  corpus_dir: "data/corpus" # Output directory for .spacy files
  # Input/Output Files
  combined_csv: "${vars.derived_data_dir}/combined_comments.csv"
  graphed_csv: "${vars.derived_data_dir}/graphed_comments.csv"
  gold_labels_file: "data/derived/labels_gold.csv" # Placeholder path
  predicted_labels_file: "data/derived/labels_predicted.csv" # Placeholder path
  # Models & Artifacts
  model_artifacts_dir: "${vars.results_dir}/model_artifacts"
  relevance_model_path: "${vars.model_artifacts_dir}/relevance_setfit"
  stance_pi_model_path: "${vars.model_artifacts_dir}/stance_pi_deberta_lora"
  ideology_model_path: "${vars.model_artifacts_dir}/ideology_setfit" # Example path
  # Analysis Outputs
  tables_dir: "${vars.results_dir}/tables"
  figures_dir: "${vars.results_dir}/figures"
  # Settings
  seed: 42
  test_size: 0.15
  dev_size: 0.15 # Train size will be 1 - test_size - dev_size

# --- Commands ---
# Note: Scripts for combine_raw, annotate, train_*, predict, analyze are placeholders
commands:
  - name: "combine_raw_csvs"
    help: "Combine individual raw CSVs, assign has_DEI and before_DEI flags."
    script: "scripts/preprocess/combine_company_csv.py"
    deps:
      - "scripts/preprocess/combine_company_csv.py"
      # This script scans the raw_data_dir, so implicitly depends on it
      - "${vars.raw_data_dir}"
    outputs:
      - "${vars.combined_csv}"

  - name: "preprocess_graph"
    help: "Add graph features (root_id, depth, etc.) to combined comments."
    script: "scripts/preprocess/graph_features.py"
    deps:
      - "${vars.combined_csv}"
      - "scripts/preprocess/graph_features.py"
    outputs:
      - "${vars.graphed_csv}"
    args:
      - "${vars.combined_csv}" # input arg
      - "${vars.graphed_csv}" # output arg

  - name: "convert_to_docbin"
    help: "Clean comments and convert CSV data to spaCy DocBin format (train/dev/test splits)."
    script: "scripts/preprocess/convert_comments.py"
    deps:
      - "${vars.graphed_csv}"
      - "scripts/preprocess/convert_comments.py"
      - "scripts/preprocess/pipeline_clean.py" # Defines the cleaner used
    outputs:
      - "${vars.corpus_dir}/train.spacy"
      - "${vars.corpus_dir}/dev.spacy"
      - "${vars.corpus_dir}/test.spacy"
    args:
      - "${vars.graphed_csv}" # src arg
      - "${vars.corpus_dir}" # out_dir arg

  - name: "annotate"
    help: "(Placeholder) Run annotation process (e.g., using Prodigy). Requires manual setup and execution."
    # Example using Prodigy CLI if installed and configured
    # run: "prodigy textcat.manual gold_labels ${vars.graphed_csv} --label RELEVANCE,STANCE,PURCHASE,IDEOLOGY ..."
    # outputs_no_cache:
    #   - "${vars.gold_labels_file}" # Ensure this is generated by the annotation process
    run: "echo 'Placeholder: Run annotation process manually (e.g., Prodigy)'"

  - name: "train_relevance"
    help: "(Placeholder) Train SetFit model for Relevance classification."
    script: "scripts/model/train_setfit.py" # Assumed script name
    deps:
      - "${vars.graphed_csv}"
      - "${vars.gold_labels_file}"
      - "scripts/model/train_setfit.py"
    outputs:
      - "${vars.relevance_model_path}"
    # Example CLI args (adjust based on actual script)
    # args:
    #   - "--input_file"
    #   - "${vars.graphed_csv}"
    #   - "--labels_file"
    #   - "${vars.gold_labels_file}"
    #   - "--output_dir"
    #   - "${vars.relevance_model_path}"
    #   - "--seed"
    #   - "${vars.seed}"
    run: "echo 'Placeholder: Implement and run scripts/model/train_setfit.py'"

  - name: "train_stance_pi"
    help: "(Placeholder) Train DeBERTa+LoRA model for Stance & Purchase Intent."
    script: "scripts/model/train_deberta_lora.py" # Assumed script name
    deps:
      - "${vars.graphed_csv}"
      - "${vars.gold_labels_file}"
      - "scripts/model/train_deberta_lora.py"
    outputs:
      - "${vars.stance_pi_model_path}"
    # Example CLI args
    # args: ... similar to above ...
    run: "echo 'Placeholder: Implement and run scripts/model/train_deberta_lora.py'"

  - name: "train_ideology"
    help: "(Placeholder) Train model for Ideology Cue classification."
    # script: "scripts/model/train_ideology.py" # Or might reuse setfit/deberta script
    deps:
      - "${vars.graphed_csv}"
      - "${vars.gold_labels_file}"
      # - "scripts/model/train_ideology.py"
    outputs:
      - "${vars.ideology_model_path}"
    run: "echo 'Placeholder: Implement and run ideology model training'"

  - name: "predict_all"
    help: "(Placeholder) Run inference using trained models to generate predictions for the full dataset."
    # script: "scripts/model/predict.py" # Assumed script name
    deps:
      - "${vars.graphed_csv}"
      - "${vars.relevance_model_path}"
      - "${vars.stance_pi_model_path}"
      - "${vars.ideology_model_path}"
      # - "scripts/model/predict.py"
    outputs:
      - "${vars.predicted_labels_file}"
    run: "echo 'Placeholder: Implement and run prediction script'"

  - name: "analyze"
    help: "(Placeholder) Run Triple-Difference causal analysis."
    script: "scripts/analysis/did_results.py" # Assumed script name
    deps:
      - "${vars.graphed_csv}" # Or maybe the predicted_labels file? Depends on script input
      - "${vars.predicted_labels_file}"
      - "scripts/analysis/did_results.py"
    outputs:
      - "${vars.tables_dir}" # Indicate directory output
      - "${vars.figures_dir}" # Indicate directory output
    # Example CLI args
    # args:
    #   - "--input_data"
    #   - "${vars.predicted_labels_file}"
    #   - "--output_tables"
    #   - "${vars.tables_dir}"
    #   - "--output_figures"
    #   - "${vars.figures_dir}"
    run: "echo 'Placeholder: Implement and run scripts/analysis/did_results.py'"

  - name: "test"
    help: "(Placeholder) Run unit tests."
    run: "pytest tests/" # Assumes tests are in tests/ directory

# --- Workflows ---
workflows:
  preprocess:
    - "combine_raw_csvs"
    - "preprocess_graph"
    - "convert_to_docbin"
  train:
    - "train_relevance"
    - "train_stance_pi"
    - "train_ideology"
  predict:
    - "predict_all"
  analysis:
    - "analyze"
  all:
    - "preprocess"
    - "train" # Assumes annotation happens manually between preprocess and train
    - "predict"
    - "analysis"
    - "test"

# --- Assets --- (Optional: For linking external data via URL/checksum)
assets: []

# --- Registered Functions --- (Optional: For custom Python functions)
# Example:
# functions:
#   custom_combine:
#     script: "scripts/custom_functions.py"
#     path: "custom_combine_function"

